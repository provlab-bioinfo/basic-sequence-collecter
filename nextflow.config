manifest {
  author = 'Andrew Lindsay'
  description = 'basic-sequence-collector'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.01.0'
  version = '0.0.2'
  defaultBranch   = 'main'
}

params {
  
  // Input options
  input = null
  output = null
  label = 'raw'

  // Boilerplate options
  tracedir                   = "${params.output}/pipeline_info"
  publish_dir_mode           = 'copy'
  email                      = null
  email_on_fail              = null
  plaintext_email            = false
  monochrome_logs            = false
  hook_url                   = null
  help                       = false
  version                    = false
  validate_params            = true
  schema_ignore_params       = 'nanopore_search_path,illumina_search_path,illumina1_search_path,illumina2_search_path,label,fastq_exts,nanopore_suffixes,illumina_suffixes,illumina1_suffixes,illumina2_suffixes,multiqc_custom_config'

  // Folder search options
  fastq_exts = ['.fastq.gz', '.fq.gz', '.fastq', '.fq']
  
  illumina_suffixes = ['*_R{1,2}_001', '*_R{1,2}', '*_{1,2}' ]
  illumina_search_path = makeFastqSearchPath( params.illumina_suffixes, params.fastq_exts )

  illumina1_suffixes = ['*_R1_001', '*_R1', '*_1' ]
  illumina1_search_path = makeFastqSearchPath( params.illumina1_suffixes, params.fastq_exts )

  illumina2_suffixes = ['*_R2_001', '*_R2', '*_2' ]
  illumina2_search_path = makeFastqSearchPath( params.illumina2_suffixes, params.fastq_exts )
  
  nanopore_suffixes = ['*_barcode[0-9][0-9]*','*_barcode[0-9][0-9][0-9]*']
  nanopore_search_path = makeFastqSearchPath( params.nanopore_suffixes, params.fastq_exts )  
}

def makeFastqSearchPath (fastqSuffixes, fastq_exts) {
      def fastqSearchPath = []
      for (suffix in fastqSuffixes){
          for (ext in fastq_exts){
              fastqSearchPath.add(params.input.toString() + '**/' + suffix.toString() + ext.toString())
          }
      }
      return fastqSearchPath
}

profiles {
  conda {
    conda.enabled = true
    docker.enabled         = false
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
    apptainer.enabled      = false
  }
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}